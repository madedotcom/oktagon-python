name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches: [main]

jobs:
  linters:
    name: Run linters
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          cache: "poetry"

      - name: Install dependencies
        run: make install

      - name: black
        run: make black-check

      - name: isort
        run: make isort-check

      - name: pylint
        run: make pylint

  tests:
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest

    name: Test ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"

      - name: Install dependencies
        run: make install

      - name: Tests
        run: make test-coverage
        env:
          COVERAGE_FILE: ".coverage"

      - name: Store coverage file
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: .coverage

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        id: download
        with:
          name: "coverage"

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          cache: "poetry"

      - name: Install dependencies
        run: make install

      - name: Coverage Report
        id: coverage
        run: make coverage-report
 test-publish:
    name: Publish on test PyPI
    runs-on: ubuntu-latest
    needs: tests
    steps:

      - uses: actions/checkout@v2

      - name: Install poetry
        run: |
          pipx install poetry
          pip install poetry-dynamic-versioning

      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          cache: "poetry"

      - name: üêç Install dependencies
        run: |
          poetry install
        
      - name: üì¶ Build package
        run: poetry build

      - name: Metadata
        id: metadata
        run: |
          echo '::echo::on'
          set +e
          echo $(poetry run dunamai from git --no-metadata --style semver)
          echo "::set-output name=commit::$(make hash)"

      - name: Publish release version on Test PyPI
        id: release
        env:
          OKTAGON_TEST_PYPI_TOKEN: ${{ secrets.OKTAGON_TEST_PYPI_TOKEN }}
        run: |
          echo '::echo::on'
          set +e
          make pre-release
          make build
          make publish-test
      
      - name: Create
        uses: peter-evans/create-or-update-comment@v1
        if: steps.check_release.outputs.release == ''
        with:
          issue-number: ${{ github.event.number }}
          body: |
            # Pre-release
            :wave:
            Pre-release **${{ steps.release.outputs.version }}** [${{ steps.metadata.outputs.commit }}] has been released on Test PyPi! :rocket:
            You can try it by doing:
            ```shell
            pip install --extra-index-url https://test.pypi.org/simple/ oktagon-python==${{ steps.release.outputs.version }}
            ```
