name: Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]


jobs:

  linters:
    name: Run linters
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          cache: 'poetry'

      - name: Install dependencies
        run: make install-deps

      - name: black
        run: make black-check

      - name: isort
        run: make isort-check

      - name: pylint
        run: make pylint
  
  tests:
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            cache-path: ~/.cache/pypoetry/virtualenvs

    name: Test ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install dependencies
        run: make install-deps

      - name: Tests
        run: make test-coverage 

      - name: Coverage
        run: make coverage-report

  pre-release:
    name: Pre-release
    runs-on: ubuntu-latest
    needs: [linters, tests]
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Install poetry
        run:  |
          pip install autopub
          pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          cache: 'poetry'
        
      - name: Check if RELEASE.md file exists
        id: check_release
        run: make check-release
      
      - name: Publish pre-release version
        if: steps.check_release.outputs.release == ''
        id: release
        env:
          OKTAGON_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: make pre-release
